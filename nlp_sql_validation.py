nlp_questions = [
    "Can you list all employees along with the names of their departments?",
    "Who are the employees that were hired after January 1, 2021?",
    "What is the total salary expense for each department?",
    "Can you show a list of projects and the number of employees assigned to each project?",
    "Which customers have placed orders with an amount greater than $3000?",
    "What is the average salary of employees in the Development department?",
    "Can you list all customers who have placed more than one order?",
    "Which project has the longest duration?",
    "Who are the employees working on Project Alpha?",
    "Which department has the highest average salary?" ]

sql_queries = [
    """
    SELECT e.first_name, e.last_name, d.department_name
    FROM employees e
    JOIN departments d ON e.department_id = d.department_id;
    """,
    """
    SELECT first_name, last_name, hire_date
    FROM employees
    WHERE hire_date > '2021-01-01';
    """,
    """
    SELECT d.department_name, SUM(e.salary) AS total_salary
    FROM employees e
    JOIN departments d ON e.department_id = d.department_id
    GROUP BY d.department_name;
    """,
    """
    SELECT p.project_name, COUNT(ep.employee_id) AS num_employees
    FROM projects p
    LEFT JOIN employee_projects ep ON p.project_id = ep.project_id
    GROUP BY p.project_name;
    """,
    """
    SELECT c.customer_name, o.order_date, o.amount
    FROM orders o
    JOIN customers c ON o.customer_id = c.customer_id
    WHERE o.amount > 3000;
    """,
    """
    SELECT AVG(e.salary) AS avg_salary
    FROM employees e
    JOIN departments d ON e.department_id = d.department_id
    WHERE d.department_name = 'Development';
    """,
    """
    SELECT c.customer_name, COUNT(o.order_id) AS num_orders
    FROM customers c
    JOIN orders o ON c.customer_id = o.customer_id
    GROUP BY c.customer_name
    HAVING COUNT(o.order_id) > 1;
    """,
    """
    SELECT project_name, DATEDIFF(end_date, start_date) AS duration
    FROM projects
    ORDER BY duration DESC
    LIMIT 1;
    """,
    """
    SELECT e.first_name, e.last_name
    FROM employees e
    JOIN employee_projects ep ON e.employee_id = ep.employee_id
    JOIN projects p ON ep.project_id = p.project_id
    WHERE p.project_name = 'Project Alpha';
    """,
    """
    SELECT d.department_name, AVG(e.salary) AS avg_salary
    FROM employees e
    JOIN departments d ON e.department_id = d.department_id
    GROUP BY d.department_name
    ORDER BY avg_salary DESC
    LIMIT 1;
    """]

import mysql.connector
from typing import List, Dict, Callable, Tuple



class SQLProcessor:
    def __init__(self, nlp_questions: List[str], sql_queries: List[str], nlp_sql_function: Callable[[str], str],
                 host: str, database: str, user: str, password: str):
        self.nlp_questions = nlp_questions
        self.sql_queries = sql_queries
        self.nlp_sql = nlp_sql_function
        self.host = host
        self.database = database
        self.user = user
        self.password = password

    def run_queries_and_store_results(self) -> Tuple[List[Dict], List[int]]:
        """
        Execute the SQL queries and compare the results with those generated by the NLP SQL function.
        :return: A list of dictionaries containing NLP questions, SQL queries, LLM generated SQL,
                 and their comparison response, along with a list of comparison results.
        """
        results = []
        comparison_results = []

        try:
            connection = mysql.connector.connect(
                host=self.host,
                database=self.database,
                user=self.user,
                password=self.password
            )
            if connection.is_connected():
                print("Connected to MySQL")
                # Iterate through each SQL query in the list
                for index, query in enumerate(self.sql_queries):
                    cursor = connection.cursor()
                    try:
                        # Execute the original SQL query
                        cursor.execute(query)
                        result = cursor.fetchall()
                    except mysql.connector.Error:
                        comparison_results.append(0)
                        continue

                    # Create a variable for the respective NLP question
                    nlp_question = self.nlp_questions[index]
                    try:
                        # Convert NLP question to SQL using the nlp_sql function
                        generated_sql = self.nlp_sql(nlp_question)
                    except Exception as nlp_sql_error:
                        print(f"Error in nlp_sql function for question '{nlp_question}': {nlp_sql_error}")
                        comparison_results.append(0)
                        continue

                    try:
                        # Execute the generated SQL query
                        cursor.execute(generated_sql)
                        result2 = cursor.fetchall()
                    except mysql.connector.Error:
                        comparison_results.append(0)
                        continue

                    # Check if the number of rows and columns match
                    if len(result) != len(result2) or len(result[0]) != len(result2[0]):
                        comparison_results.append(0)
                    else:
                        # Compare each row from result2 with result (in any order)
                        comparison_success = True
                        for row2 in result2:
                            if tuple(row2) not in result:
                                comparison_success = False
                                break
                        if not comparison_success:
                            comparison_results.append(0)
                        else:
                            comparison_results.append(1)

                    # Store results in the required format
                    results.append({
                        "nlp_question": nlp_question,
                        "sql_query": query,
                        "llm_generated_sql": generated_sql,
                        "comparison_response": comparison_results[-1]  # Get the last comparison result
                    })

                return results, comparison_results  # Return both detailed results and overall comparisons
        except mysql.connector.Error as e:
            print(f"Database error: {e}")
            return [], []
        finally:
            if connection.is_connected():
                connection.close()
                print("MySQL connection closed")
